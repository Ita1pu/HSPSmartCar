var gulp = require("gulp");
var sass = require("gulp-sass");
var replace = require("gulp-replace");
var rename = require("gulp-rename");
var concat = require("gulp-concat");

var fs = require("fs");
var os = require("os");
var path  = require('path');
var types = require('node-sass').types;

var sassInlineImage = function(options) {
    options = options || {};

    var base = options.base || process.cwd();
    return {
        'inline-image($file)': function(file) {
            // we want to file relative to the base
            var relativePath = './' + file.getValue();
            var filePath = path.resolve(base, relativePath);
            
            var data = fs.readFileSync(filePath);
            var buffer = new Buffer(data);

            var ext = filePath.split('.').pop();
            var ext = ext === 'svg' ? 'svg+xml' : ext;

            var str = '"data:image/' + ext + ';base64,' + buffer.toString('base64') + '"';

            return types.String(str);
        }
    };
};

var compileSass = {};

compileSass.compile = (callback = null) => { 
    var stream = gulp.src(["src/client/style.scss"]);
    
    stream = stream.pipe(sass({ 
        functions: sassInlineImage() 
    }).on("error", sass.logError));

    stream = stream.pipe(gulp.dest((f) => { return f.base; }));

    if (callback != null)
         stream.on("end", () => { callback(); }); 
}

compileSass.release = (callback = null) => {
    var stream = gulp.src(["src/client/style.scss"]);
    
    stream = stream.pipe(sass({ 
        functions: sassInlineImage(),
        outputStyle: "compressed" 
    }).on("error", sass.logError));

    stream = stream.pipe(gulp.dest((f) => { return f.base; }));

    if (callback != null)
         stream.on("end", () => { callback(); }); 
}

compileSass.generateVariables = (callback = null) => {
    var stream = gulp.src(["src/client/variables.js"]);

    stream = stream.pipe(replace("\"use strict\";", "\"use strict\";Object.defineProperty(exports, \"__esModule\", { value: true });"));
    stream = stream.pipe(replace("(Var || (Var = {}));", "(Var = exports.Var \|\| (exports.Var = {}));"));
    stream = stream.pipe(rename({ extname: ".tmp.js" }));
    stream = stream.pipe(gulp.dest("build/tmp/"));

    stream.on("end", () => { 
        delete require.cache[require.resolve("../build/tmp/variables.tmp")];
        var variables = require("../build/tmp/variables.tmp"); 

        fs.writeFile("./src/client/variables.scss", "/*\n\nAUTOGENERATED FILE\n\n! DO NOT MODIFY !\n\n*/\n\n\n");  

        var recursive = (props, prefix) => {
            for (var prop in props) {
                if (typeof(props[prop]) == "string")
                    fs.appendFile("./src/client/variables.scss", "$" + prefix + prop + ": \"" + props[prop] + "\";" + os.EOL);
                else
                    recursive(props[prop], prefix + prop.substring(0, 1).toLowerCase() + prop.substring(1) + "_");
            }
        };
        recursive(variables.Var.Style, "");
        recursive(variables.Var.Images, "img_");

        if (callback != null)
            callback();    
    });
}

module.exports = compileSass;